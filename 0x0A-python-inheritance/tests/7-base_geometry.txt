Test for 7-base_geometry..py
-------------------------------------------

This module provides a base geometry class called BaseGeometry.

Instantiation
=============

BaseGeometry does not have any attributes and can be initialized without any arguments.

>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry
>>> bg = BaseGeometry()
>>> type(bg)
<class '7-base_geometry.BaseGeometry'>

>>> print(bg) # doctest: +ELLIPSIS
<7-base_geometry.BaseGeometry object at ...>

Attempting to pass any arguments to an instance of BaseGeometry will result in a TypeError.

>>> bg = BaseGeometry(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: object() takes no parameters

Methods
=======

BaseGeometry has two methods - area(self) and integer_validator(self, name, value). The area() method is not yet implemented.

>>> bg = BaseGeometry()
>>> print(bg.area) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
<bound method BaseGeometry.area of <7-base_geometry.BaseGeometry object at...>>

>>> bg.area()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
Exception: area() is not implemented

The integer_validator(...) method validates the integer value of a parameter. The first parameter, name, is the name of the argument to check, and the second argument, value, is the argument to check.

>>> print(bg.integer_validator) # doctest: +ELLIPSIS, +NORMALIZE_WHITESPACE
<bound method BaseGeometry.integer_validator of <7-base_geometry.BaseGeometry object at...>>

If value is a valid integer, the function does nothing.

>>> bg.integer_validator("valid number", 1)

However, if value is not an integer, a TypeError is raised.

>>> bg.integer_validator("invalid number", "number")
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: invalid number must be an integer

>>> bg.integer_validator("another invalid", True)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: another invalid must be an integer

>>> bg.integer_validator("invalid tuple", (1,))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: invalid tuple must be an integer

>>> bg.integer_validator("and another", [3])
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: and another must be an integer

>>> bg.integer_validator("more invalid testing", {3, 4})
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: more invalid testing must be an integer

>>> bg.integer_validator("absolutely every possible invalid", None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: absolutely every possible invalid must be an integer

If value is an integer but less than or equal to zero, a ValueError is raised.

>>> bg.integer_validator("invalid int", -1)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid int must be greater than 0

>>> bg.integer_validator("invalid int", 0)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
ValueError: invalid int must be greater than 0

Both name and value must be provided; otherwise, a TypeError is raised.

>>> bg.integer_validator()
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'

>>> bg.integer_validator(None)
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: integer_validator() missing 1 required positional argument: 'value'

The method assumes that the parameter name will be a string, but any type of name will be printed.

>>> bg.integer_validator({"a": 1}, (1, 2))
Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
TypeError: {'a': 1} must be an integer

