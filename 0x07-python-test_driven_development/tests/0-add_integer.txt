================================
How to Use 0-add_integer.py
================================

This module defines a function for integer addition called `add_integer(a, b=98)`.

Usage
=====
The `add_integer(...)` function returns the sum of its two arguments. For numeric values, this is equivalent to using the `+` operator.

Example Usage:
--------------
>>> from add_integer import add_integer
>>> add_integer(2, 3)
5

>>> add_integer(2, -3)
-1

The function also supports floating-point values.

>>> add_integer(2.0, 3.0)
5

Note: Floats are casted to integers before the addition is performed.

>>> add_integer(2.9, 0.2)
2

>>> add_integer(-2.9, -0.2)
-2

You can also mix floating-point and non-floating-point values.

>>> add_integer(2.3, -3)
-1

The second argument is optional; its default value is 98.

>>> add_integer(2)
100

Non-Numbers
===========
The `add_integer()` function expects both arguments to be integers or floats. If either argument is a non-integer and non-float, a `TypeError` is raised.

Example:
>>> add_integer("hello", 3)
TypeError: a must be an integer

>>> add_integer(2, "hello")
TypeError: b must be an integer

>>> add_integer(None)
TypeError: a must be an integer

>>> add_integer(2.3, None)
TypeError: b must be an integer

If both arguments are non-integers and non-floats, a `TypeError` message is only printed for the first argument.

>>> add_integer("hello", "there")
TypeError: a must be an integer

Error Handling
==============
The function will raise an `OverflowError` if `inf` or `NaN` values are provided.

>>> add_integer(float('inf'))
OverflowError: cannot convert float infinity to integer

>>> add_integer(2, float('inf'))
OverflowError: cannot convert float infinity to integer

>>> add_integer(float('nan'))
ValueError: cannot convert float NaN to integer

>>> add_integer(2, float('nan'))
ValueError: cannot convert float NaN to integer

